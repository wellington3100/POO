import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from datetime import datetime

class NotaRemision:
    def __init__(self, root):
        self.root = root
        self.root.title("Nota de Remisión")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # Lista para almacenar los productos
        self.productos = []
        
        # Variables para totales
        self.subtotal = 0.0
        self.iva_pct = 16.0  # IVA del 16%
        self.total_iva = 0.0
        self.total_final = 0.0
        
        self.crear_interfaz()
        
    def crear_interfaz(self):
        # Título
        titulo = tk.Label(self.root, text="NOTA DE REMISIÓN", 
                         font=("Arial", 16, "bold"), bg='#f0f0f0')
        titulo.pack(pady=10)
        
        # Frame para información de la empresa
        frame_empresa = tk.LabelFrame(self.root, text="Información de la Empresa", 
                                     font=("Arial", 10, "bold"), bg='#f0f0f0')
        frame_empresa.pack(fill="x", padx=20, pady=5)
        
        tk.Label(frame_empresa, text="Fecha: " + datetime.now().strftime("%d/%m/%Y"), 
                bg='#f0f0f0').pack(anchor="w", padx=10, pady=2)
        tk.Label(frame_empresa, text="Folio: 001", 
                bg='#f0f0f0').pack(anchor="w", padx=10, pady=2)
        
        # Frame para agregar productos
        frame_productos = tk.LabelFrame(self.root, text="Agregar Productos", 
                                       font=("Arial", 10, "bold"), bg='#f0f0f0')
        frame_productos.pack(fill="x", padx=20, pady=10)
        
        btn_agregar = tk.Button(frame_productos, text="Agregar Producto", 
                               command=self.agregar_producto, 
                               font=("Arial", 10), bg='#4CAF50', fg='white')
        btn_agregar.pack(pady=10)
        
        # Tabla de productos
        frame_tabla = tk.LabelFrame(self.root, text="Productos", 
                                   font=("Arial", 10, "bold"), bg='#f0f0f0')
        frame_tabla.pack(fill="both", expand=True, padx=20, pady=5)
        
        # Crear Treeview para mostrar productos
        self.tree = ttk.Treeview(frame_tabla, columns=("Cantidad", "Descripción", "Precio Unit.", "Total"), 
                                show="headings", height=8)
        
        # Configurar columnas
        self.tree.heading("Cantidad", text="Cantidad")
        self.tree.heading("Descripción", text="Descripción")
        self.tree.heading("Precio Unit.", text="Precio Unit.")
        self.tree.heading("Total", text="Total")
        
        self.tree.column("Cantidad", width=80, anchor="center")
        self.tree.column("Descripción", width=300, anchor="w")
        self.tree.column("Precio Unit.", width=100, anchor="e")
        self.tree.column("Total", width=100, anchor="e")
        
        # Scrollbar para la tabla
        scrollbar = ttk.Scrollbar(frame_tabla, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        self.tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Frame para totales
        frame_totales = tk.LabelFrame(self.root, text="Totales", 
                                     font=("Arial", 10, "bold"), bg='#f0f0f0')
        frame_totales.pack(fill="x", padx=20, pady=5)
        
        # Labels para mostrar totales
        self.lbl_subtotal = tk.Label(frame_totales, text="Subtotal: $0.00", 
                                    font=("Arial", 10), bg='#f0f0f0')
        self.lbl_subtotal.pack(anchor="e", padx=10, pady=2)
        
        self.lbl_iva = tk.Label(frame_totales, text="IVA (16%): $0.00", 
                               font=("Arial", 10), bg='#f0f0f0')
        self.lbl_iva.pack(anchor="e", padx=10, pady=2)
        
        self.lbl_total = tk.Label(frame_totales, text="Total: $0.00", 
                                 font=("Arial", 12, "bold"), bg='#f0f0f0')
        self.lbl_total.pack(anchor="e", padx=10, pady=5)
        
        # Botones de acción
        frame_botones = tk.Frame(self.root, bg='#f0f0f0')
        frame_botones.pack(fill="x", padx=20, pady=10)
        
        btn_limpiar = tk.Button(frame_botones, text="Limpiar Todo", 
                               command=self.limpiar_todo, 
                               font=("Arial", 10), bg='#f44336', fg='white')
        btn_limpiar.pack(side="left", padx=5)
        
        btn_imprimir = tk.Button(frame_botones, text="Generar Resumen", 
                                command=self.generar_resumen, 
                                font=("Arial", 10), bg='#2196F3', fg='white')
        btn_imprimir.pack(side="right", padx=5)
    
    def agregar_producto(self):
        # Solicitar datos del producto usando simpledialog
        descripcion = simpledialog.askstring("Producto", "Ingrese la descripción del producto:")
        if not descripcion:
            return
            
        try:
            cantidad = simpledialog.askinteger("Cantidad", "Ingrese la cantidad:", minvalue=1)
            if not cantidad:
                return
                
            precio_unitario = simpledialog.askfloat("Precio", "Ingrese el precio unitario:", minvalue=0.01)
            if not precio_unitario:
                return
                
        except (ValueError, TypeError):
            messagebox.showerror("Error", "Por favor ingrese valores válidos")
            return
        
        # Calcular total del producto
        total_producto = cantidad * precio_unitario
        
        # Agregar a la lista de productos
        producto = {
            'descripcion': descripcion,
            'cantidad': cantidad,
            'precio_unitario': precio_unitario,
            'total': total_producto
        }
        
        self.productos.append(producto)
        
        # Agregar a la tabla
        self.tree.insert("", "end", values=(
            cantidad,
            descripcion,
            f"${precio_unitario:.2f}",
            f"${total_producto:.2f}"
        ))
        
        # Actualizar totales
        self.actualizar_totales()
        
        messagebox.showinfo("Éxito", f"Producto agregado:\n{cantidad} x {descripcion}")
    
    def actualizar_totales(self):
        # Calcular subtotal
        self.subtotal = sum(producto['total'] for producto in self.productos)
        
        # Calcular IVA
        self.total_iva = self.subtotal * (self.iva_pct / 100)
        
        # Calcular total final
        self.total_final = self.subtotal + self.total_iva
        
        # Actualizar labels
        self.lbl_subtotal.config(text=f"Subtotal: ${self.subtotal:.2f}")
        self.lbl_iva.config(text=f"IVA ({self.iva_pct}%): ${self.total_iva:.2f}")
        self.lbl_total.config(text=f"Total: ${self.total_final:.2f}")
    
    def limpiar_todo(self):
        if messagebox.askyesno("Confirmar", "¿Está seguro de que desea limpiar todos los productos?"):
            self.productos.clear()
            
            # Limpiar tabla
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # Resetear totales
            self.subtotal = 0.0
            self.total_iva = 0.0
            self.total_final = 0.0
            self.actualizar_totales()
    
    def generar_resumen(self):
        if not self.productos:
            messagebox.showwarning("Advertencia", "No hay productos para mostrar")
            return
        
        # Crear ventana de resumen
        ventana_resumen = tk.Toplevel(self.root)
        ventana_resumen.title("Resumen de Nota de Remisión")
        ventana_resumen.geometry("600x500")
        ventana_resumen.configure(bg='white')
        
        # Crear texto del resumen
        texto_resumen = tk.Text(ventana_resumen, wrap=tk.WORD, font=("Courier", 10))
        texto_resumen.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Generar contenido del resumen
        resumen = "=" * 60 + "\n"
        resumen += "                  NOTA DE REMISIÓN\n"
        resumen += "=" * 60 + "\n\n"
        resumen += f"Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
        resumen += f"Folio: 001\n\n"
        resumen += "-" * 60 + "\n"
        resumen += f"{'Cant':<5} {'Descripción':<30} {'P.Unit':<10} {'Total':<10}\n"
        resumen += "-" * 60 + "\n"
        
        for producto in self.productos:
            resumen += f"{producto['cantidad']:<5} "
            resumen += f"{producto['descripcion'][:28]:<30} "
            resumen += f"${producto['precio_unitario']:<9.2f} "
            resumen += f"${producto['total']:<9.2f}\n"
        
        resumen += "-" * 60 + "\n"
        resumen += f"{'Subtotal:':<45} ${self.subtotal:>10.2f}\n"
        resumen += f"{'IVA (16%):':<45} ${self.total_iva:>10.2f}\n"
        resumen += f"{'TOTAL:':<45} ${self.total_final:>10.2f}\n"
        resumen += "=" * 60 + "\n"
        
        texto_resumen.insert(tk.END, resumen)
        texto_resumen.config(state=tk.DISABLED)


if __name__ == "__main__":
    root = tk.Tk()
    app = NotaRemision(root)
    root.mainloop()
